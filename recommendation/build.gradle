group 'at.mkaran.thesis'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'com.google.protobuf'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

repositories {
    mavenCentral()
}

def grpcVersion = '1.5.0' // CURRENT_GRPC_VERSION

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
    compile fileTree(dir: 'libs', include: '*.jar')
    //compile fileTree(dir: '../commons/build/libs', include: '*.jar') // not working yet with docker
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile 'biz.paluch.redis:lettuce:4.4.2.Final'
    testCompile "junit:junit:4.11"
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.3.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
    }
}

// Inform IntelliJ projects about the generated code.
apply plugin: 'idea'

idea {
    module {
        // Not using generatedSourceDirs because of
        // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
    }
}

// Provide convenience executables for trying out the examples.
apply plugin: 'application'


task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'at.mkaran.thesis.recommendation.RecommendationServer'
}

startScripts.enabled = false

task recommendationServer(type: CreateStartScripts) {
    mainClassName = "at.mkaran.thesis.recommendation.RecommendationServer"
    applicationName = "recommendation-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
    from(recommendationServer)
    fileMode = 0755
}
